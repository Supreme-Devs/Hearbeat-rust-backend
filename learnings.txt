// for taking input from the user in any endpoint we need to use serde for serialization and deserialization
// json is not the first class citizen in rust

// we write the structs and then we use the structures for input and output in json format


for using the library store 

add store as a dependency in the api/cargo.toml
and in the file where you want to use the store 
use store::Store;


// start a postgres container in docker 
docker run -p 5432:5432 -e POSTGRES_PASSWORD=postgres  postgres  
// link to db 
DATABASE_URL=postgres://postgres:postgres@localhost:5432/postgres


// connecting to db via diesel 
step 1 : adding diesel to our store
step 2 : downloading the CLI
step 3 : diesel setup creates migration with a up and down file 
step 4 : adding database url to the .env file
step 5 : writing the raw sql query in the migration file 
step 6 : run diesel migration run
step 7 : this generate the schema.rs file in the library





// For starting the postgres server in docker from scratch 
step 1  : Make sure the postgres is running in the background
step 2 : docker run -p 5432:5432 -e POSTGRES_PASSWORD=postgres  postgres 
step 3 : docker exec -it <container_id> psql -U postgres -c "CREATE DATABASE rust_app;"
step 4 : change the link in .env to this DATABASE_URL=postgres://postgres:postgres@localhost:5432/rust_app 
step 5 : write raw sql query in the migration file
step 6 : run diesel migration run
step 7 : this generate the schema.rs file in the library



// for confirming go inside the container and run the command
step 1 : docker exec -it <container_id> sh
step 2 : psql -U postgres
step 3 : listing the databases \l
step 4 : for connecting to the db /c <db_name >
step 5 : for viewing all the tables \dt



// docker exec -it my_postgres psql -U postgres 


// Steps after automation
step 1 : bash setup/setup.sh 
step 2 : go inside the store folder and diesel migration run
step 3 : bash setup/list_table.sh 
